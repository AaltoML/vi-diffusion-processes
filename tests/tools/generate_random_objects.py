#
# Copyright (c) 2021 The Markovflow Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""A module contatining a collection of generating random matrices to be used in tests."""
from typing import Tuple

import numpy as np


def generate_random_pos_def_matrix(shape: int, batch_shape: Tuple = tuple()) -> np.ndarray:
    """
    Generate a random positive definite matrix (i.e. for covariances)

    :param shape: order of the square matrix generated by this function
    :param batch_shape: the batch dimensions to create at the front
    :return: A positive definite matrix of order n, with random entries.
    """

    matrix = generate_random_lower_triangular_matrix(shape, batch_shape)
    return np.einsum("...ij,...kj->...ik", matrix, matrix)


def generate_random_lower_triangular_matrix(shape: int, batch_shape: Tuple = tuple()) -> np.ndarray:
    """
    Generate a random lower triangular matrix.

    :param shape: order of the square matrix generated by this function
    :param batch_shape: the batch dimensions to create at the front
    :return: A lower triangular matrix of order n, with random entries.
    """
    return np.tril(np.random.normal(size=batch_shape + (shape, shape)))


def generate_random_time_points(expected_range: float, shape: Tuple) -> np.ndarray:
    """
    Generate random time points using an exponential distribution.

    :param expected_range: The expected distance between the first and last data point
    :param shape: The shape of the distribution to generate
    :return: Random time points with the passed in shape
    """
    # the last dimension of the shape is number of data points
    scale = expected_range / shape[-1]
    delta_ts = np.random.exponential(scale=scale, size=shape)
    return np.cumsum(delta_ts, axis=-1)


def generate_random_time_observations(
    obs_dim: int, num_data: int, batch_shape: Tuple = tuple()
) -> Tuple[np.ndarray, np.ndarray]:
    """
    Generate random time points and observations for those time points.

    :param obs_dim: the dimension of each observation
    :param num_data: the number of observations
    :param batch_shape: the batch dimensions to create at the front
    :return: time points batch_shape + [num_data] and
             observations batch_shape + [num_data, obs_dim]
    """

    time_points = generate_random_time_points(expected_range=4.0, shape=batch_shape + (num_data,))

    observations = np.cos(100 * time_points)[..., None] + 1e-3 * np.random.normal(
        size=batch_shape + (num_data, obs_dim)
    )
    return time_points, observations
